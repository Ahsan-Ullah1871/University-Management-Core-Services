// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicDepartment {
  id                  String          @id @default(uuid())
  title               String          @unique
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  academic_faculty_id String
  academic_faculty    AcademicFaculty @relation(fields: [academic_faculty_id], references: [id])
  students            Student[]
  faculties           Faculty[]

  @@map("academic_departments")
}

model AcademicSemester {
  id          String    @id @default(uuid())
  year        Int
  title       String
  code        String
  start_month String
  end_month   String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  students    Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                    String               @id @default(uuid())
  title                 String
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  Academic_deepartments AcademicDepartment[]
  students              Student[]
  faculties             Faculty[]

  @@map("academic_faculties")
}

model Student {
  id                     String             @id @default(uuid())
  student_id             String
  first_name             String
  last_name              String
  middle_name            String?
  profile_image          String?
  email                  String             @unique
  contact_no             String             @unique
  gender                 String
  blood_group            String
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  academic_department_id String
  academic_department    AcademicDepartment @relation(fields: [academic_department_id], references: [id])
  academic_semester_id   String
  academic_semester      AcademicSemester   @relation(fields: [academic_semester_id], references: [id])
  academic_faculty_id    String
  academic_faculty       AcademicFaculty    @relation(fields: [academic_faculty_id], references: [id])

  @@map("students")
}

model Faculty {
  id                     String             @id @default(uuid())
  faculty_id             String
  first_name             String
  last_name              String
  middle_name            String?
  profile_image          String?
  email                  String             @unique
  contact_no             String             @unique
  gender                 String
  blood_group            String
  designation            String
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  academic_department_id String
  academic_department    AcademicDepartment @relation(fields: [academic_department_id], references: [id])
  academic_faculty_id    String
  academic_faculty       AcademicFaculty    @relation(fields: [academic_faculty_id], references: [id])

  @@map("faculties")
}

model Building {
  id         String   @id @default(uuid())
  title      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  room       Room[]

  @@map("buildings")
}

model Room {
  id          String   @id @default(uuid())
  room_number String
  floor       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  building_id String
  building    Building @relation(fields: [building_id], references: [id])

  @@map("rooms")
}

model Course {
  id                   String                 @id @default(uuid())
  title                String
  code                 String
  credits              Int
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  prerequisite_courses CourseToPreRequisite[] @relation("prerequisite_course")
  prerequisite_for     CourseToPreRequisite[] @relation("prerequisite_for")

  @@map("courses")
}

model CourseToPreRequisite {
  prerequisite_id String
  course_id       String

  prerequisite_course Course @relation(fields: [prerequisite_id], references: [id], name: "prerequisite_course")

  prerequisite_for Course @relation(fields: [course_id], references: [id], name: "prerequisite_for")

  @@id([prerequisite_id, course_id])
  @@map("courses_to_prerequisite")
}
