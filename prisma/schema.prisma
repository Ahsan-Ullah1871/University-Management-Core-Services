// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicDepartment {
  id                  String          @id @default(uuid())
  title               String          @unique
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  academic_faculty_id String
  academic_faculty    AcademicFaculty @relation(fields: [academic_faculty_id], references: [id])
  students            Student[]
  faculties           Faculty[]
  OfferedCourse       OfferedCourse[]

  @@map("academic_departments")
}

model AcademicSemester {
  id          String    @id @default(uuid())
  year        Int
  title       String
  code        String
  start_month String
  end_month   String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  students    Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                    String               @id @default(uuid())
  title                 String
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  Academic_deepartments AcademicDepartment[]
  students              Student[]
  faculties             Faculty[]

  @@map("academic_faculties")
}

model Student {
  id                          String                        @id @default(uuid())
  student_id                  String
  first_name                  String
  last_name                   String
  middle_name                 String?
  profile_image               String?
  email                       String                        @unique
  contact_no                  String                        @unique
  gender                      String
  blood_group                 String
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @updatedAt
  academic_department_id      String
  academic_department         AcademicDepartment            @relation(fields: [academic_department_id], references: [id])
  academic_semester_id        String
  academic_semester           AcademicSemester              @relation(fields: [academic_semester_id], references: [id])
  academic_faculty_id         String
  academic_faculty            AcademicFaculty               @relation(fields: [academic_faculty_id], references: [id])
  StudentSemesterRegistration StudentSemesterRegistration[]

  @@map("students")
}

model Faculty {
  id                         String                       @id @default(uuid())
  faculty_id                 String
  first_name                 String
  last_name                  String
  middle_name                String?
  profile_image              String?
  email                      String                       @unique
  contact_no                 String                       @unique
  gender                     String
  blood_group                String
  designation                String
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  academic_department_id     String
  academic_department        AcademicDepartment           @relation(fields: [academic_department_id], references: [id])
  academic_faculty_id        String
  academic_faculty           AcademicFaculty              @relation(fields: [academic_faculty_id], references: [id])
  courses                    CourseFaculty[]
  OfferedCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id         String   @id @default(uuid())
  title      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  room       Room[]

  @@map("buildings")
}

model Room {
  id                         String                       @id @default(uuid())
  room_number                String
  floor                      String
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  building_id                String
  building                   Building                     @relation(fields: [building_id], references: [id])
  OfferedCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                   String                 @id @default(uuid())
  title                String
  code                 String
  credits              Int
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  prerequisite_courses CourseToPreRequisite[] @relation("prerequisite_course")
  prerequisite_for     CourseToPreRequisite[] @relation("prerequisite_for")
  faculties            CourseFaculty[]
  OfferedCourse        OfferedCourse[]

  @@map("courses")
}

model CourseToPreRequisite {
  prerequisite_id String
  course_id       String

  prerequisite_course Course @relation(fields: [prerequisite_id], references: [id], name: "prerequisite_course")

  prerequisite_for Course @relation(fields: [course_id], references: [id], name: "prerequisite_for")

  @@id([prerequisite_id, course_id])
  @@map("courses_to_prerequisite")
}

model CourseFaculty {
  faculty_id String
  faculty    Faculty @relation(fields: [faculty_id], references: [id])

  course_id String
  course    Course @relation(fields: [course_id], references: [id])

  @@id([faculty_id, course_id])
  @@map("courses_to_faculty")
}

model SemesterRegistration {
  id                          String                        @id @default(uuid())
  start_date                  DateTime
  end_date                    DateTime
  status                      Status                        @default(UPCOMING)
  min_credit                  Int
  max_credit                  Int
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @updatedAt
  OfferedCourse               OfferedCourse[]
  OfferedCourseSection        OfferedCourseSection[]
  OfferedCourseClassSchedule  OfferedCourseClassSchedule[]
  StudentSemesterRegistration StudentSemesterRegistration[]

  @@map("semester_ragistration")
}

// 
model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId      String
  semesterRegistration        SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Status {
  UPCOMING
  ONGOING
  ENDED
}
